03. 데이터 프레임과 시리즈

3.1) 데이터 프레임

3.1.1 데이터 프레임이란? 데이터 프레임은 2차원 표 형식의 데이터를 효율적으로 처리하고자 만들어진 클래스
인덱스(index), 컬럼즈(columns), 밸류즈(values)로 구성된다.
인덱스: 행 이름의 집합
컬럼즈: 열 이름의 집합
밸류즈: 데이터의 집합, 넘파이의 어레이 클래스

* 파이썬에서 리스트나 넘파이의 어레이는 키를 기반으로 하는 인덱싱을 지원하지 않음

3.1.2 데이터 프레임의 구조 확인하기

import pandas as pd
df = pd.DataFrame( 2차원 배열, index=[], columns=[])

해당 코드 실행시 출력된 데이터 프레임에서 행이름의 집합이 인덱스이고 열 이름의 집합이 컬럼즈이다. 데이터들만 모인 2차원 배열이 밸류즈이다.

* df.index -> 행 이름 집합 확인하기 / Index([행 이름 집합],dtype='object')
object는 예시이다. 보통 문자열이나 문자열이 섞인 경우 object로 나온다.

 * df.columns -> 컬럼즈 집합 확인 하기 / Index([열 이름 집합],dtype='object')
인덱스와 컬럼즈 모두 동일한 Index클래스에 속한다. 

* df.T -> 행과 열의 구조를 맞교환 / 이를 통해 인덱스와 컬럼즈가 단지 행이름인지 열이름인지 구분하는 차이만 있을 뿐임을 알 수 있다. 본질적으로는 동일한 자료구조를 가진다.

* df.values -> 데이터 프레임의 밸류즈 반환 /  array( 2차원 배열 ,dtype='int64')
dtype의 int64는 예시 자료형이다. 여기서 중요한 것은 밸류즈의 클래스가 array라는 점이다. 따라서 데이터 프레임이 많은 부분에서 어레이와 비슷하게 작동한다.

3.1.3 데이터 프레임 생성하기

- 데이터 프레임은 DataFrame 함수로 생성한다.
- D와 F가 대문자임을 유의해야한다.
- 인덱스, 컬럼즈, 밸류즈의 세 부분으로 구성되어 있다. 매개변수를 기억하자.
- 인덱스와 컬럼즈를 비워두면 0부터 시작하는 숫자가 들어간다. 이를 RangeIndex라고 한다.
- 딕셔너리를 이용해서도 데이터 프레임을 생성할 수 있다. 2차원 딕셔너리 구조에서 상위 딕셔너리의 key가 컬럼즈가 되고, 하위 딕셔너리의 key와 value가 인덱스와 데이터가 된다.

3.1.4 매개변수와 인수, 기본값
일반적으로 수학에서는 f(2,1)과 같이 인수만 기재할 뿐 f(x=2,y=1)처럼 매개변수와 인수를 함께 넣지는 않는다. 하지만 만약 함수의 매개변수가 30개라면 매개변수의 일부는 직접 매개변수와 인수를 함께 지정해 줄 필요가 있을 것이며 매개변수를 써주지 않더라도 기본값을 지정해줄 필요가 있을 것이다. 
데이터 프레임에서 인덱스와 컬럼즈를 비워주더라도 RangeIndex가 생성되는 이유가 이것이다.

3.2) 시리즈

2차원 표 데이터 : 데이터 프레임
1차원 데이터 : 시리즈 

3.2.1 시리즈란?
- 시리즈는 데이터 프레임에서 한 열만 가져온것과 같다. 1차원이기 때문에 컬럼즈가 없다. 
- 밸류즈와 인덱스로만 구성된다.

3.2.2 시리즈 생성하기
* pd.Series([1,2,3,4])
- S는 대문자이니 주의한다
- 1차원 리스트나 어레이 모두 가능하다.
- 인덱스를 지정하지 않으면 0  1 2 3 이렇게 인덱스가 생성된다.

* pd.Series([1,2,3,4], index=['가','나','다','라'])
- 인덱스 배열의 길이는 데이터의 개수와 일치해야한다.

* 데이터 프레임의 열에서 시리즈 추출하기
df['열 이름']

3.2.3 시리즈의 구조 확인하기
* s.index -> 시리즈의 인덱스 반환 / Index([인덱스의 이름 집합],dtype='object')
인덱스의 클래스는 Index이며 데이터 프레임과 동일하게 나온다.

*s.values -> 시리즈의 밸류즈 반환 / array([1차원 배열],dtype=int64)
넘파이의 어레이를 기반으로 만들어짐

3.3) 파일에서 데이터 프레임 불러오기

데이퍼 프레임을 코드로 생성하는 것도 가능하지만, 이미 존재하는 표 데이터에서 데이터 프로엠을 불러오는 것도 가능하다. 엑셀 파일이나 CSV 파일에서 데이터 프레임을 불러올 수 있다. 

3.3.1. 엑셀 파일에서 데이터 프레임 불러오기(read_excel)

import pandas as pd
url = 엑셀 파일 url주소 또는 엑셀 파일 저장된 경로
df = pd.read_excel(url)
df

*엑셀 파일에서 두번째 시트 불러오기

df = pd.read_excel(url,sheet_name='두번째 시트이름') 또는 pd.read_excel(url,sheet_name=1)
df

-> 가장 첫번째 시트가 0번째 시트이므로 두번째 시트가 1이 된다.

* 만약 세번째 시트를 읽어오려는데 세번째 시트의 다섯번째 행까지 비어있을 경우 해당 시트의 여섯번째 행부터 읽어오는 방법

df = pd.read_excel(url,sheet_name=2,header=5)
df

->첫 행도 0부터 시작하기 때문에 여섯번째 행인 header도 5가 된다.

* 네 번째 시트의 맨 왼쪽열을 인덱스로 지정해서 불러오기

df = pd.read_excel(url,sheet_name=3,index_col=0)
df

* 다섯번째 시트의 '학생코드: 01' 텍스트를 숫자가 아닌 문자로 읽어들이게 하기

df = pd.read_excel(url,sheet_name=4,dtype={'학생코드':'str'})
df

3.3.2 CSV 파일에서 데이터 프레임 불러오기(read_csv)
csv파일은 시트를 텍스트로 구현한 파일 형식이다.
csv(comma-separated values) - 열은 쉼표로 행은 줄바꿈으로 구분

import pandas as pd
url = 'csv 파일 url 주소' 또는 'csv 파일 경로'
df = pd.read_csv(url, encoding='utf-8')
df

- CSV파일은 엑셀과 달리 인코딩 방식을 정확하게 지정해야 한다.
- 기본적으로 UTF-8 방식으로 인코딩을 지정한다.

3.4) 데이터 프레임 저장하기

3.4.1. 딕셔너리로 변환하기(to_dict)
- 데이터 프레임은 파이썬의 판다스에서만 사용 가능한 데이터 구조
- 다은 프로그래밍 언어로 결과 데이터를 활용하거나 파이썬 내에서 다른 라이브러리로 데이터를 다룰때 주로 딕셔너리로 변환한다.

* df.to_dict()
- 컬럼즈 부분이 상위 딕셔너리의 key가 되고, 하위 딕셔너리에 인덱스와 데이터가 키와 밸류로 입력된다.

3.4.2 파일로 저장하기(to_excel,to_csv)
*df.to_excel('파일명.xlsx')
 -만약 앞에 0,1,2,3같은 인덱스가 함께 저장된다면
df.to_excel('파일명.xlsx', index=False)를 넣어준다.


*df.to_csv('파일명.csv')
- 기본값으로 구분자는 쉼표로 지정되며 인코딩 방식은 기본값으로 UTF-8로 지정된다.

3.4.3 함수와 메서드, 속성

* 함수 : 독립적으로 호출 가능
ex)pd.read_excel('1.xlsx')

* 메서드 : 클래스 내부에 정의되어 있어 객체에 종속되어 있음. 특정 객체에 종속되어 호출됨. ex) df.to_dict()

*속성 : 클래스 내부에 정의된 변수, 함수가 아니기 때문에 인수를 입력받지 않음
ex) df.index

-> 판다스는 주로 메서드를 사용한다. 이유는 하나의 객체에 여러가지 함수를 연속해서 사용할때가 많기 때문.
a.c(a.c(a.c(a.c(a.c()))))
a.c().c().c().c()
후자의 형태가 훨씬 깔끔하다.


3.5) 데이터 프레임 탐색하기

3.5.1 데이터 프레임의 간단한 정보 파악하기(info 등)

* df.info
RangeIndex: n entries 0 to (n -1) : 전체 인덱스 값이 나온다
#: 각 열의 로케이션, 각 열의 위치가 나온다.
Non-Null Count: 각 열에서 누락되지 않은 값의 개수

* df.shape : 행,열 갯수 확인
(행, 열)

* df.dtypes : 각 열의 자료형 확인


3.5.2 데이터 프레임의 일부만 가져오기 (head,tail)

* df.head() : 기본값으로 상위 5행을 가져온다.
* df.tail(6): 하위 6행을 가져온다.

3.5.3 데이터 프레임의 기술 통계 확인하기(describe)
* df.describe()
평균, 표준편차, 최소, 백분위, 최댓값등을 구할 수 있다.

3.5.4 각 열의 유일 값 확인하기(unique,nunique)
* df['열이름'].unique() : 해당 열의 유일한 값들을 가져온다.
-> 결과 값이 array([0,1])이라면 해당 열에는 0과 1값 밖에 없다.

* df['열이름'].nunique() : 해당 열의 유일 값들의 갯수를 센다.
-> 결과 2 (0과 1)

3.5.5 유일값의 빈도수 파악하기
범주형 데이터(성공/실패, 남/여와 같은 데이터)는 각 범주에 해당하는 유일 값의 빈도수를 파악 하는 것이 중요하다.

* df['열이름'].value_counts() : 각 유일 값의 빈도수가 새로운 시리즈로 반환된다.
-> 0과 1만 가지는 열이라면 0이 549 1이 342이렇게 자세한 값으로 나온다.

* 유일값의 비율 확인 하기
* df['열이름'].value_counts(nomalize=True) : 소수점으로 각 값의 비율이 나타난다.
ex) A: 0.55 B: 0.22 C: 0.24

3.5.6 히스토그램 그리기(hist)
수치형 데이터는 히스토 그램으로 보는 것이 효과적이다. 나이나 금액에 쓰인다.

* df['나이'].hist()

3.5.7 데이터 프레임과 시리즈 시각화 하기(plot)
판다스에는 시각화 전용 라이브러리인 matplotlib을 기반으로 만들어진 plot 함수가 있다.

* plot함수로 막대그래프 그리기
df['열이름'].value_counts().plot(kind='bar')

*plot함수로 산점도 그리기(x축 나이와 y축 요금의 관계)
df.plot(kind='scatter',x='나이',y='요금')


