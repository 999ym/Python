05 연산

5.1) 판다스 연산 입문

5.1.1 벡터화 연산
시리즈와 데이터 프레임의 연산은 벡터화 연산을 따른다.

- 벡터화 연산 : x는 x끼리 y는 y끼리 d연산을 수행하는 것
ex) a = (3,1), b=(1,2), a+b=(4,3)
a*2=(6,2)

- 데이터 프레임이 넘파이 기반으로 만들어져서 어레이의 벡터화 연산의 특성을 그대로 계승했다.
- 리스트: 반복문으로 개별 요소를 반복시켜 연산하거나 함수로 매핑해야한다.
- 시리즈 *2 만으로도 전체 요소에 *2가 가능하다.

5.1.2 연산자와 연산함수
- 시리즈와 데이터 프레임은 연산자 또는 연산 함수를 사용하여 연산을 수행한다.
- 단순 연산은 연산자와 연산 함수의 기능이 동일하다.
- 브로드캐스팅의 축을 지정하고자 매개변수 axis를 사용하거나, NaN 값을 부여하고자 매개변수 fill_value를 사용할 때는 연산자대신 연산 함수를 사용한다.
- 연속 메서드를 사용할 때도 연산자가 오히려 가독성을 떨어뜨려 연산 함수를 사용한다.

* 산술 연산자와 연산 함수
+ | add | 덧셈
- | sub | 뺄셈
* | mul | 곱셈
/ | div | 나눗셈 
** | pow | 지수연산
// | floordiv | 몫
% | mod | 나머지 

ex) df1+df2 와 df1.add(df2) 는 같은 결과가 나온다.

* 비교 연산자와 연산 함수
== | eq | 같다
!= | ne | 다르다
> | gt | 크다
< | lt | 작다
>= | ge | 크거나 같다
<= | le | 작거나 같다

ex) df>3 과 df.gt(3) 모두 가능하다.

* 논리 연산자와 기능
비트연산자 & / 의미 : and / 기능 :  모두 True일 때만 True를 반환, 그 외는 False를 반환
비트연산자 | / 의미 : or / 기능: 하나라도 True라면 True를 반환, 모두 False일 때만 False를 반환
비트연산자 ~ / 의미: not / 기능: True는 False를 반환, False는 True를 반환
=> 파이썬에서 불(bool) 자료형의 논리 연산을 할 때 논리 연산자 and와 비트연산자 &를 모두 사용하지만 판다스의 객체로 논리 연산을 수행할 때는 반드시 비트연산자(&,|,~)를 사용해야한다. 그렇지 않으면 에러가 발생한다.
 
5.2) 시리즈의 연산

- 시리즈와 단일 값의 연산은 시리즈의 모든 셀에서 단일 값과 연산을 수행한다.
- 시리즈와 시리즈의 연산은 인덱스가 동일한 셀끼리 연산한다. 

5.2.1 시리즈와 단일 값의 연산 

import pandas as pd
s1 = pd.Series([1,5,0,4],index=list('ABCD'))
s2 = pd.Series([1,2,3,3],index=list('ABCD'))
s3 = pd.Series([3,4,2,3],index=list('ABDE'))

* 시리즈와 단일 값의 산술 연산 덧셈
s1 +2 # 연산자를 사용하거나
s1.add(2)# 연산 함수를 사용할 수 있다.

* 시리즈와 단일 값의 비교 연산
s1 >3 # 연산자
s1.gt(3) # 연산 함수

5.2.2 시리즈 간의 연산

* 인덱스가 일치하는 두 시리즈의 뺄셈
s1-s2 # 연산자
s1.sub(s2) # 연산 함수

* 인덱스가 일치하는 두 시리즈의 동등 비교 연산(==)
s1==s2 # 연산자
s1.eq(s2) # 연산 함수

* 시리즈의 논리 연산 : 반드시 비트연산자를 사용해야한다. 비교연산자는 소괄호로 묶어야한다.
(s1>0) & (s1<3) # 연산자를 사용하면 반드시 소괄호로 묶어야 한다.
s1.gt(0) & s1.lt(3) # 연산 함수

★인덱스의 구성이 다른 두 시리즈의 곱셈
s1*s3 # 연산자
s1.mul(s3) # 연산 함수
- 인덱스가 일치하는 셀끼리 곱셈을 수행한다.
- 양측 모두에 동일한 인덱스가 존재하지 않는 셀은 NaN이 출력된다.
- 인덱스가 존재하지 않는 곳의 값은 NaN이고 NaN의 자료형은 float다. 따라서 시리즈에 단하나라도 정수가 아닌 실수가 있다면 시리즈의 자료형은 실수형이 된다.

★인덱스의 구성이 다른 두 시리즈의 비교 연산
s1.le(s3) # 연산 함수를 사용해야 한다.
- 인덱스의 구성이 일치하는 셀끼리 비교 연산을 수행한다.
- 동일한 인덱스가 존재하지 않는 셀은 False를 반환한다.
- 인덱스의 구성이 다를 때, 비교 연산은 연산자 <=는 사용할 수 없고 연산 함수 le를 사용해야 한다.
- s1,s3 양측 모두에 동일한 인덱스가 없는 셀은 NaN과 비교 연산을 수행한다. 단일 값과 NaN의 비교 연산의 결과는 전부 False이므로 한쪽에만 존재하는 인덱스를 가진 셀의 비교 결과는 전부 False이다.

5.2.3 데이터 프레임에서 열 간의 연산

- 데이터 프레임의 열은 시리즈이다.
- 하나의 데이터 프레임에서 추출한 두 개의 열은 인덱스가 완전히 일치한다.
- 따라서, 두 열간의 연산은 인덱스가 완전히 일치하는 두 시리즈의 연산과 같다.

* 실습 예제 코드
import pandas as pd
data1={'성':['김','강','권','박'],
       '이름':['판다','승주','보아','효신'],
       '국어':[79,65,92,95],
       '영어':[68,83,87,79]}
df=pd.DataFrame(data1)

* 국어 열과 영어 열을 더해 총점 열 생성하기
df['총점']=df['국어']+df['영어']

* 총점 열을 2로 나누어 평균 열 생성하기
df['평균'] = df['총점'] / 2

* 국어 점수가 영어 점수보다 높은 사람 확인 하기
df['국어'] > df['영어']

* 평균 점수가 80점 미만인 사람 확인하기
df['평균'] < 80

* 국어 점수가 영어 점수보다 높으면서, 80점 미만인 사람 확인 하기
(df['국어'] > df['영어']) & (df['평균'] < 80)

* 성과 공백, 이름을 합쳐 성명 열을 생성
df['성명'] = df['성']+' '+df['이름']

5.3) 데이터 프레임의 연산

- 데이터 프레임과 단일 값의 연산은 데이터 프레임의 모든 셀에서 각각 단일 값과 연산한다.
- 데이터 프레임 간의 연산은 인덱스와 컬럼즈가 모두 일치하는 셀끼리 연산한다.
- 중요하게 학습할 부분은 데이터 프레임과 시리즈의 연산인 브로드 캐스팅이다.

5.3.1 데이터 프레임과 단일 값의 연산

* 실습 예제 코드
import pandas as pd
data1 = [[0,1,1],[0,2,1],[4,2,5],[2,2,5]]
data2 = [[3,2,1],[3,4,5],[0,3,4],[0,0,4]]
df1=pd.DataFrame(data1, index=list('abcd'),columns=list('ABC'))
df2=pd.DataFrame(data2, index=list('abcd'),columns=list('ABC'))
df3=pd.DataFrame(data2, index=list('abde'),columns=list('ABD'))

* 데이터 프레임과 단일 값의 산술 연산(몫)
df1 // 3 # 연산자
df1.floordiv(3) # 연산 함수

* 데이터 프레임과 단일 값의 비교 연산(다르다)
df1 !=2 # 연산자
df1.ne(2) # 연산 함수

5.3.2 데이터 프레임 간의 연산

- 데이터 프레임 간의 연산은 인덱스와 컬럼즈가 모두 같은 셀 간의 연산이 수행된다.

* 인덱스와 컬럼즈가 일치하는 두 데이터 프레임의 산술 연산 
df1 + df2 # 연산자
df1.add(df2) # 연산 함수

* 인덱스와 컬럼즈가 일치하는 두 데이터 프레임의 비교 연산 
df1 >= df2 # 연산자
df1.ge(df2) # 연산 함수

★인덱스와 컬럼즈가 완전히 일치하지 않는 두 데이터 프레임의 산술 연산
df1+ df3 # 연산자 
df1.add(df3) # 연산 함수
- 인덱스가 공통인 a,b,d와 컬럼즈가 공통인 A,B에서만 연산을 하고 나머지는 전부 NaN을 반환한다.

5.3.3 NaN을 대체해 연산하기(연산 함수의 fill_value)

-  df1과 df3가 각 사람(a,b,c,d,e)이 각 품목(A,B,C,D)을 생산한 생산량을 나타내는 데이터라고 가정한다.
- df1은 어제의 생산량이고 df3은 오늘의 생산량이다. 어제(df1)는 a,b,c,d 네 사람이 품목 A,B,C를 생산했고, 오늘(df3)은 a,b,d,e 네 사람이 품목 A,B,D를 생산 했다.
- 이때 어제의 생산량과 오늘 생산량의 합계를 구하고 싶어도, df1와 df3을 그냥 더하면 인덱스와 컬럼즈가 일치하지 않아 대규모로 NaN이 생성되어 원하는 데이터가 생성되지 않는다.
- 이때 연산 함수의 매개변수로 fill_value를 사용한다.
- 생산량이므로 존재하지 않는 값은 NaN이 아니라 0으로 보는 것이 옳다.
- 연산 함수를 사용하고 fill_value=0을 입력하면, 연산을 수행하기 전에 양측 모두에 존재하지 않는 값을 NaN이 아닌 0으로 채운 뒤 연산을 수행한다.

* fill_value=0을 입력해 코드를 수행
df1.add(df3,fill_value=0) # 양쪽 모두에 없는 값은 NaN을 반환한다.

5.3.4 데이터 프레임과 시리즈의 연산(브로드 캐스팅)

- 사칙연산과 같은 기본 연산 : 단일값-단일값
- 모든 셀이 각각 단일 값과 연산 : 단일값-시리즈, 단일값-데이터프레임
- 인덱스(혹은 인덱스와 컬럼즈)가 같은 셀끼리 연산: 시리즈-시리즈, 데이터프레임-데이터프레임
- 브로드캐스팅 : 시리즈 - 데이터프레임
- 브로드 캐스팅은 모든 방향으로 전한다는 뜻, 판다스의 연산에서 브로드 캐스팅은 1차원인 시리즈가 2차원인 데이터 프레임의 모든 행과 연산하는 것을 의미한다.

* 실습 예제 코드
import pandas as pd
data1 = [[1,1,1],[1,2,3],[4,3,5],[2,2,4]]
df=pd.DataFrame(data1,index=list('abcd'),columns=list('ABC'))
s1=pd.Series([0,1,2],index=list('ABC'))
s2=pd.Series([0,1,2,3],index=list('abcd'))


* 데이터 프레임과 시리즈의 곱셈(브로드 캐스팅)
df*s1 #axis=1이라는 기본값이 들어가 있다. axis는 확장 방향을 설정할 수 있는데, 데이터 프레임의 각 행이 시리즈와 연산 하는 것이다.

* 브로드 캐스팅의 축 지정
df.mul(s2,axis=0) #axis=0이므로 데이터 프레임의 각 열이 시리즈와 연산한다.


* 브로드 캐스팅의 축 방향을 정확히 지정해 주지 않을 때
df*s2 # 서로 맞는 인덱스와 컬럼즈 값이 없어서 NaN값만 나오게 됨

''' 엑셀 예제2 : 주식 종목들의 일별 주가 추이 분석
- 주가로 여러 종목의 그래프를 한꺼번에 그리면, 각각의 주가 규모가 달라서 한눈에 들어오는 정보를 얻기 힘들다. 이럴 때 특정 일자의 주가를 기준으로 주가를 비율로 표현하면 원하는 그래프를 그리기가 쉽다. '''

* 주가 엑셀 파일에서 데이터 프레임 불러 오기
# 2021년 6월 1일 기준으로 다섯 개 종목(네이버, sk하이닉스, 삼성전자, 카카오, 펄어비스)의 주가 추이를 시각화 (기간 2021/06/01~2023/12/22)

import pandas as pd
pd.options.display.max_rows=6 #6행까지만 출력
url1='https://github.com/panda-kim/book1/blob/main/06stock.xlsx?raw=true'
df_stock=pd.read_excel(url1,index_col=0)
df_stock

* 각 종목의 주가를 기준일 대비 주가의 비율로 변환하기 
df_stock /df_stock.iloc[0] #연산자
df_stock.div(df_stock.iloc[0]) #연산 함수

*각 종목의 주가 추이 시각화 
df_stock.div(df_stock.iloc[0]).plot(backend='plotly',width=600,height=400)
- 판다스의 plot 함수는 손쉽게 시각화가 가능하지만 matplotlib 라이브러리 기반으로 만들어진 함수이므로 기본값으로 한글을 지원하지 않는다.
 - 종목명을 영어로 변경 또는 한글을 지원하는 파이썬의 시각화 라이브러리인 plotly를 사용하는 방법이 있다.
- plotly 기반일때는 매개 변수나 인수가 변경된다. width와 height에 그래프의 크기를 픽셀 단위로 지정한다. 

5.4) 통계 함수 적용하기

- 시리즈와 데이터 프레임 등 객체 간 연산 뿐만 아니라 데이터 프레임이나 시리즈 그 자체만으로도 방대한 데이터를 가진다. 

5.4.1 집계 함수 : 그룹의 값을 단일 값으로 반환해 차원을 축소하는 함수

- 집계 함수는 군집의 데이터를 요약한 통계를 제공하는 함수이다. 함, 평균, 표준편차, 최댓값, 최솟값, 중간값 등 대부분의 통계 함수가 여기에 속한다.

* 실습 예제 코드
import pandas as pd
data1=[[10,float('nan'),50],[20,20,80],[30,40,80],[40,60,20]]
df1=pd.DataFrame(data1,index=list('ABCD'), columns=['국어','영어','수학'])

* df1에 mean 함수 적용해 평균을 반환하기 
df1.mean() #NaN 값이 있을경우 그 값의 행은 아예 카운트 하지 않고 각 열을 평균냄
df1.mean(axis=1) # axis=1을 넣을경우 각 행의 평균이 반환된다. NaN값은 제외

5.4.2 누적 통계 함수

- 누적 통계 함수 : 최초 부터 해당 위치까지의 누적된 통계를 보여준다. 집계 함수와 달리 차원을 축소 하지 않는다.기본적으로 각 열에서 해당 위치까지의 누적 합을 구한 데이터가 반환된다.

* 실습 예제 코드
import pandas as pd
data2 = [[1,2,3],[4,5,6],[7,8,9],[7,2,4]]
df2=pd.DataFrame(data2,index=list('ABCD'),columns=['가','나','다'])

* df2의 누적 합 구하기
df2.cumsum() #각 열에서 해당 위치까지의 누적 합
df2.cumsum(axis=1) #각 행에서 해당 위치까지의 누적 합

5.4.3 매개변수 axis와 축 지정

- 각 함수마다 축을 암기할 필요 X

1) 인덱스나 컬럼즈를 변환하는 함수들(set_axis, reindex 등)
axis=0 인덱스를 변환
axis=1 컬럼즈를 변환

2) 데이터를 삭제하는 함수들(drop, dropna 등)
axis=0 행을 삭제
axis=0 열을 삭제

3) 각 열이나 각 행에 함수 적용하는 함수(sum, mean 등의 집계 함수, apply 등)
axis=0 각 열에 함수 적용
axis=1 각 행에 함수 적용

4) 함수 적용 방향이 존재하는 함수(cumsum, shift, concat 등)
axis=0 위에서 아래쪽 방향으로 함수 적용
axis=1 왼쪽에서 오른쪽 방향으로 함수 적용

5) 연산의 브로드 캐스팅
axis=0 데이터 프레임의 각 행과 시리즈가 연산
axis=1 데이터 프레임의 각 열과 시리즈가 연산

5.4.4 그 외 다양한 통계 함수

- 일상과 통계에서 널리 사용되는 함수는 아니지만 판다스에서 사용하는 집계 함수들을 살펴본다.
- 불 자료형에서 사용하는 집계 함수 : all / any
* all : 각 열의 모든 셀의 데이터가 True이면 True를 반환한다. axis=0 일때 각 열, axis=1일때 각 행 기본값은 0이다.
* any : 각 열에서 하나라도 True이면 True를 반환한다. axis=0 일때 각 열, axis=1일때 각 행 기본값은 0이다.

* df2에 모든 값이 2보다 큰 열이 존재하는지 확인
ㄴ 실습 예제 코드
import pandas as pd
data2 = [[1,2,3],[4,5,6],[7,8,9],[7,2,4]]
df2=pd.DataFrame(data2,index=list('ABCD'),columns=['가','나','다'])
df2.cumsum(axis=1)

df2.gt(2).all() #가,나,다 인덱스로 집계함수로 전부 False로 출력된다.

*df2의 각 행이 2를 하나라도 보유하는지 확인 
df2.eq(2).any(axis=1)# A와 D행만 2를 보유한다.

- 색인을 반환하는 집계 함수 : idxmax / idxmin (최댓값과 최솟값이 복수일때는 가장 먼저 위치한 색인을 반환, 기본값으로는 각 열에서 최댓값인 행의 이름, axis=1일때는 각 행에서 최댓값인 열의 이름을 색인으로 반환한다)

* df1으로 실습해 각 열에서 최댓값인 행의 이름을 반환
ㄴ 실습 예제 코드
import pandas as pd
data1=[[10,float('nan'),50],[20,20,80],[30,40,80],[40,60,20]]
df1=pd.DataFrame(data1,index=list('ABCD'), columns=['국어','영어','수학'])

df1.idxmax() # 각 열에 매칭되는 행의 이름이 나온다. 수학열은 B,C행이 모두 최댓값이 80을 가졌으나 먼저 위치한 B의 색인을 반환했다.
'''
결과 
국어 D
영어 D
수학 B
'''
df1.idxmax(axis=1) # 각 행에서 최댓값을 가지는 점수의 과목이 매칭되었다.
'''
결과 
A	수학
B	수학
C	수학
D	영어
'''


# 기존 데이터 프레임과 구조가 완전히 다른 데이터 프레임을 생성하는 통계 함수들이 있다. 
데이터의 상관관계를 구하는 corr이나 공분산을 구하는 cov 함수이다.

* df2 각 열의 상관관계를 반환 # 완전히 동일한 항목간의 상관계수는 1이다.
df2.corr()

* df2 의 공분산 구하기
df2.cov()

엑셀 예제 3) 다양한 통계 함수 실습하기

" 위로부터 조장을 기점으로 조를 부여하라"

* 엑셀파일 첫번째 시트에서 데이터 프레임 불러오기
import pandas as pd
url2='https://github.com/panda-kim/book1/blob/main/07statics.xlsx?raw=true'
df1=pd.read_excel(url2)

* 조 배정하기 # df1의 '구분'열이 '조장'과 같은지 비교하여 조장 여부에 따라 True나 False를 반환한다. True는 1,False는 0로 계산되므로 누적 합을 구하면 조장일 때만 1이 더해진다.
df1['조']=df1['구분'].eq('조장').cumsum()

"각 팀의 승수와 승률을 구하라"
- 엑셀 파일의 두번째 시트는 키움, 롯데, 기아 팀의 최근 100경기의 전적을 'Win'과 'Lose'러 표현한 데이터이다. 세 팀의 최근 100경기 승수와 승률을 구하라. 참고로, 무승부는 없다는 가정으로 만들어진 데이터 이다. 

* 엑셀 파일 두번째 시트에서 데이터 프레임 불러오기
df2=pd.read_excel(url2,sheet_name=1)

* 각 팀의 승수 구하기
df2.eq('Win').sum()


* 각 팀의 승률 구하기
df2.eq('Win').mean()

" 합격자 수를 구하라."
" 합격 기준: 평균 60점 이상, 단일 과목 성적 모두 40점 이상"
- 엑셀 파일의 세 번째 시트는 시험에 응시한 전체 수험생의 통계이다. 시험의 합격 기준은 평균 60점 이상이면서, 과목별로 40점 미만인 과목이 나오면 과락으로 불합격이다.

* 엑셀 파일 세번째 시트에서 데이터 프레임 불러오기
df3=pd.read_excel(url2,sheet_name=2)

* 각 과목의 평균 구하기
df3.iloc[:,:4].mean()

* 모든 과목이 40점 이상이고 평균이 60점 이상인 합격자 수 구하기
df3.ge(s).all(axis=1).sum()
ㄴ s와 df3를 ge를 통해 크거나 같다로 비교하고 all을 이용해 True로만 이루어진 행을 판별한다. axis가 1이므로 행 기준으로 본다. 행의 내용이 전부 True라면 all은 True값=1을 출력한다. 이 수를 sum으로 센다. 

"각 사람의 첫 출근일과 마지막 출근일을 구하라"
ㄴ 엑셀 파일의 네번째 시트는 2024년 2월 1일 부터 2024년 2월 7일까지 한 주간의 출근 기록이다. 

* 엑셀 파일 네번째 시트에서 데이터 프레임 불러오기
df4=pd.read_excel(url2,sheet_name=3)

* 각 사람의 출근 일 수 구하기
df4.eq('출근').sum(axis=1)

* 각 사람의 첫 출근일 구하기
df4.eq('출근').idxmax(axis=1)

* 각 사람의 마지막 출근일 구하기
df4.eq('출근').cumsum(axis=1).idxmax(axis=1)