4. 인덱스 

4.1) 인덱싱과 슬라이싱
- 데이터 프레임은 행과 열을 가지며 이를 인덱스와 컬럼즈로 색인화 한다. 인덱스와 컬럼즈는 그 위치만 다를 뿐 성격이 동일하기에 넓은 의미에서 모두 인덱스 클래스로 통칭한다. 인덱스나 컬럼즈를 활용해 특정 값 또는 연속된 값을 추출하는 기능을 인덱싱과 슬라이싱이라고 한다.

4.1.1. 대괄호 인덱싱
* df['열이름'] -> 이 방식이 대괄호 인덱싱이다. 이 방식은 친숙하고 간편하나 열 또는 행만 슬라이싱이 가능하다는 한계가 있다. 

* 복수의 열을 추출할 경우
df[['열이름1','열이름2']] -> 이중 대괄호를 사용한다.

* 동일한 열을 여러번 인덱싱도 가능하다. 
df[['열이름1','열이름2','열이름1']]

* 열의 순서도 바꿀 수 있다.
df[['열이름2','열이름3','열이름1']]

* 존재하지 않는 열의 이름을 입력해 실행할 경우 KeyError가 발생한다.
df['새로운 열']
KeyError: '새로운 열'

4.1.2 대괄호 인덱싱으로 열 생성하기

* 존재하지 않는 열의 이름으로 새로운 열을 생성하는것은 가능하다.
df['새로운 열'] : KeyError
df['새로운 열'] = 'a' : 모두 a라는 동일한 데이터를 가진 '새로운 열'이 생성되었다. 각기 다른 데이터를 입력하고 싶을 경우 기존 데이터 프레임의 데이터 개수와 같은 배열을 입력해야한다.
df[['새로운 열1','새로운 열2']]='a' : 복수의 새로운 열에 'a'라는 값을 전부 채워넣었다.

4.1.3 대괄호 인덱싱으로 열 수정하기

df['국어'] : 국어 점수라는 열이 없다면 KeyError가 뜬다.
df['국어'] : 국어 점수 열이 있다면 국어 점수 열을 인덱싱 해온다.
df['국어']= 90 : 국어 점수라는 열이 없다면 국어 점수라는 열을 새로 만들고 90점으로 전부 채운다.
df['국어']= 90 : 국어 점수 열을 전부 90점으로 수정한다.

4.1.4 대괄호 슬라이싱

슬라이싱: 인덱스나 컬럼즈를 활용하여 연속된 값을 추출하는것
- 대괄호 인덱싱은 열의 인덱싱과 행의 슬라이싱만을 지원한다는 것이 차이점이다. 

ex) df['B':'D']: B행부터 D행까지 연속된 구간을 추출한다. 대괄호 인덱서는 행을 슬라이싱한다.

4.1.5 키 인덱싱과 슬라이싱(loc 인덱서)
- iloc,loc: 대괄호 인덱싱과 달리 행과 열을 동시에 인덱싱 할 수 있다.
- loc: (key)location의 약자로 키를 기반으로 인덱싱을 수행, 열 이름을 입력한다.
- iloc: integer location의 약자로 위치를 정수로 부여한 로케이션을 기반으로 인덱싱을 수행하므로 로케이션을 입력한다.

* 현수학생의 국어 성적 추출하기
df.loc['현수','국어']
df

* loc 인덱서로 복수의 행과 열을 인덱싱하기
df.loc[['현수','나현','미지'],['국어','수학','과학']]
df

* loc 인덱서의 슬라이싱
df.loc['A':'C','국어':'수학']
df.loc[:'C','국어':] # 데이터 프레임의 첫지점과 끝지점을 생략할 수 있다.
df.loc[:'C'] # 모든 열을 가져올때는 열의 슬라이싱 전체를 생략가능, 하지만 행의 슬라이싱은 생략 불가

4.1.6 loc 인덱서로 행과 열 생성하기
- 일반적 열의 생성에는 대괄호 인덱서 사용이 바람직하다.
- 일부에만 값을 부여하는 열을 생성할 때에는 loc인덱서를 사용하는 것이 효과적이다.

* B와 D에게만 80점을 부여한 실험 열 생성하기
df.loc[['B','D'],'실험']=80  #B,D는 80, 나머지는 NaN인 실험 열 생성
df

* A의 과학 점수를 70점으로 수정하기
df.loc['A','과학']=70
df

* 전 과목 점수가 60인 F 학생의 데이터 생성하기
df.loc['F']=60 # 존재하지 않는 행을 인덱싱해 값을 부여하면 새로운 행이 된다. 생성된 행은 데이터 프레임의 마지막에 위치한다.
df

4.1.7 로케이션 인덱싱과 슬라이싱(iloc 인덱서)
- iloc는 리스트에서의 인덱싱과 유사하다. 

* 첫번째 행의 첫번째 값 가져오기
df.iloc[0,0]

* 복수의 행과 열을 인덱싱하기 (A,B,C,D행이라 가정하여 국영수 열중 A,C,D학생의 국어와 수학 성적 가져오기)
df.iloc[[0,2,3],[0,2]]

* iloc의 슬라이싱 (A~E의 국영수사과불어 과목 열에서 B~D의 영수사과 성적 추출하기)
df.iloc[1:4,1:5]

* 첫 행을 시리즈로 추출하기
df.iloc[0] # 열의 슬라이싱 전체 생략가능

* 마지막 행을 시리즈로 추출하기
df.iloc[-1] #

4.1.8 인덱싱과 슬라이싱 정리

* 대괄호 인덱서 
대상: 키 
행과 열을 동시에 인덱싱 및 슬라이싱: 불가능
행: 슬라이싱만 가능
열: 인덱싱만 가능
슬라이싱의 경계 조건: 양쪽 경계 모두 포함

* loc인데서
대상: 키 
행과 열을 동시에 인덱싱 및 슬라이싱: 가능
행: 인덱싱, 슬라이싱 모두 가능
열: 인덱싱, 슬라이싱 모두 가능
슬라이싱의 경계 조건: 양쪽 경계 모두 포함

*iloc인덱서
대상: 키 
행과 열을 동시에 인덱싱 및 슬라이싱: 가능
행: 인덱싱, 슬라이싱 모두 가능
열: 인덱싱, 슬라이싱 모두 가능
슬라이싱의 경계 조건: 시작 지점만 포함하고 끝지점은 불포함

4.2) 데이터를 추출하는 함수들

4.2.1 행과 열 삭제하기(drop)

* 데이터 프레임의 행이나 열을 삭제하는 함수
df.drop(labels, axis=0,level=None)
labels : 삭제할 행 또는 열을 지정한다. 복수의 행이나 열을 지정하려면 리스트로 묶어서 입력한다.
axis : 행을 삭제할지 열을 삭제할지 지정한다. 기본값은 0이고 행을 삭제한다.
level : 멀티 인덱스일때 삭제할 레벨을 지정한다.

ex) df.drop('영어',axis=1) # 영어 열을 삭제한다.

4.2.2 열 이름으로 필터링(filter)

* 열 이름으로 데이터 프레임을 필터링 하는 함수
df.filter(items=None, like=None, regex=None)
items : 정확하게 일치하는 문자열을 기준으로 필터링 할 때 사용 한다.
like : 포함하는 문자열을 기준으로 필터링 할 때 사용 한다.
regex :  정규 표현식을 사용할지 지정한다.

ex) df.DataFrame(data,columns=['국어','수학','과학','고전국어'])
df.filter(like='국어') # 국어를 포함하는 국어와 고전국어 열이 남는다.

4.2.3 자료형으로 열 선택하기(slect_dtypes)

*열의 자료형에 기반하여 데이터 프레임을 필터링하는 함수
df.select_dtype(inclue=None, exclude=None)
include : 포함할 자료형을 지정한다. 단일 값 또는 리스트 형태로 지정이 가능하다.
exclude : 제외할 자료형을 지정한다. 단일 값 또는 리스트 형태로 지정이 가능하다.

ex) df.select_types('int') # 자료형이 정수인 열만 추출
df.selct_types('number') # 정수와 실수 한번에 추출하기
df.select_types(exclude='float') # 실수 자료형인 열 제외하기

4.2.4 판다스의 함수와 원본 변경하기

- 판다스 대부분의 함수 적용 결과는 원본을 변경하지 않는다.
df = df.select_dtypes('number')
- 위의 코드처럼 결과를 원래의 변수로 다시 지정해야 원본을 변경할 수 있다.
- 판다스 함수는 원본을 변경하지 않아 데이터의 병렬적 처리가 가능하다.
- 원본을 변경하지 않기 때문에 연속 메서드를 사용 할 수 있다.
- df['열 이름']=80 과 같이 등호를 이용해 바로 원본 df가 변경되는 이러한 열 생성 방식을 배정이라 한다.

4.3) 인덱스와 컬럼즈를 다루는 함수들

앞서나온 함수들은 인덱스에 함수를 적용한 것이 아니라 df에 함수를 적용한 것들이었다.

4.3.1 인덱스 설정하기(set_index)

* 데이터 프레임의 인덱스를 설정하는 함수(컬럼즈를 설정할 수는 없다)
df.set_index(keys, axis=0)
keys : 인덱스로 설정될 열을 지정한다.
ex) df.set_index('이름') #이름 열을 인덱스로 설정한다. 열을 인덱스로 설정할때만 적용이 가능하며, 행을 컬럼즈로 설정할 수는 없다.

* 복수의 열을 인덱스로 설정하기
df.set_index(['반','이름'])

4.3.2 인덱스 리셋하기(reset_index)

* 인덱스에서 데이터를 제거하는 함수(컬럼즈를 대상으로는 사용할 수 없다.)
인덱스에서만 제거해 데이터 프레임의 열이되거나, 데이터를 완전히 삭제할 수 있다. 인덱스가 모두 제거되면 RangeIndex가 생성된다. 
df.reset_index(level=None, drop=False)
level : 멀티 인덱스에서 리셋할 인덱스의 레벨을 지정한다.
drop : 인덱스에서만 제거할지 완전히 데이터를 삭제할지 지정한다. 기본값은 인덱스의 데이터가 열이 된다.

ex)df.reset_index() #인덱스 열이 하나였을 경우 새로운 RangeIndex 생성
df.reset_index(drop=True) # 기존 인덱스 데이터가 완전히 삭제, 원본 df에는 영향 없음

4.3.3 인덱스와 컬럼즈 변경하기(배정)
인덱스와 컬럼즈를 새롭게 변경하는 방식은 크게 두 가지 이다. 

1) 배정방식 : 인덱스나 컬럼즈를 불러온뒤, 변경하고 싶은 배열을 입력한다. 입력될 배열의 길이는 인덱스나 컬럼즈의 길이와 반드시 일치해야한다. 인덱스의 전체를 변경하는 일은 드물어 주로 컬럼즈를 바꿀때 사용한다.

ex) df.columns=['Name','Score','Class'] > 열 이름이 이름, 점수,반 -> Name,Score,Class로 변경
* 그러나 배정방식은 원본 데이터 프레임을 변경하므로 권장하는 방식이 아니다. set_axis함수를 사용하는것을 추천한다.

4.3.4 인덱스와 컬럼즈 변경하기(set_axis)

* 인덱스나 컬럼즈를 변경하는 함수, 인덱스나 컬럼즈를 배정해 변경하는 방식과 결과는 동일하지만 원본을 변경하지 않는다. 
df.set_axis(labels,axis=0)
labels: 새로운 인덱스나 컬럼즈를 지정한다.
axis : 인덱스를 변경할지 컬럼즈를 변경할지 지정한다. 0이면 인덱스 1이면 컬럼즈가 변경된다.

ex) df.set_axis(['Name','Score','Class'], axis=1)

4.3.5 열 이름 변경 하기(rename)

* 행 이름이나 열 이름을 변경하는 함수, 주로 열 이름을 변경할 때 사용 한다. 배정이나 set_axis랑 다르게 딱 하나의 열만 정해서 이름을 변경 할 수있다.
df.rename(mapper=None, axis=0, level=None)
mapper : 이전 이름과 새롭게 부여할 이름을 매퍼로 입력한다. 가장 간단한 매퍼는 딕셔너리다.
axis : 행 이름을 변경할지 열 이름을 변경할지 지정한다. 컬럼즈는 1.
level : 멀티 인덱스일때 적용할 레벨을 지정한다.

ex) df.rename({'점수':'성적'},axis=1) > 점수 열이 성적이라는 열로 바뀐다.
df.rename({'점수':'성적','반':'소속'},axis=1) > 복수의 키를 갖는 딕셔너리로도 바꿀 수 있다.

4.3.6 매핑과 매퍼
매핑: 각 요소를 다른 값으로 대응시키는 것
매퍼: 매핑하는 매개체

ex) 함수 f를 통해서 1,2,3,4라는 값이 A,B,C,D라는 값으로 매칭된다면
함수 f가 매퍼이고, 이렇게 다른 값으로 매칭되는것이 매핑이다.

- 판다스에서는 키와 밸류의 구조를 갖는 딕셔너리나 시리즈가 매퍼로 사용된다.

4.3.7 데이터 재배열하기(reindex)

* 인덱스나 컬럼즈의 순서를 재배열해서 데이터를 재배열하는 함수
df.reindex(labels, axis=0)
labels : 재배열할 새로운 순서를 입력한다.
axis : 인덱스를 재배열할지 컬럼즈를 재배열할지 지정한다. 컬럼즈는 1이다.

ex) df.reindex(['이름','반','성별'],axis=1) > 원래 열의 순서가 이름, 점수, 반이었다면 이름, 반, 성별의 열 순서로 바뀐다.

- reindex는 열의 순서를 변경하는 함수로 알려졌으나 엄밀히는 인덱스와 컬럼즈를 재배열하는 함수이다.
- 존재하지 않는 열도 재배열 할 수 있으며 이때 존재하지 않는 열의 데이터 값은 모두 NaN이 된다.
ex) df.reindex(['이름','반','성별'],axis=1) > 이 예시에서 이름, 점수, 반에서 이름, 반, 성별로 바뀌었다고 했으므로 성별의 열의 데이터 값은 전부 NaN이다.
- 열의 순서만 변경할때는 인덱싱을 사용하는것이 좋다. reindex 함수는 주로 업샘플링(데이터의 표본을 인위적으로 늘리는것)을 수행하거나, 서로 다른 여러 데이터 프레임으로 작업 해야할 때 열의 규격을 통일 시키기 위해 사용한다.

4.3.8 인덱스명 변경하기(rename_axis)

*인덱스명을 변경하는 함수
df.rename_axis(mapper=None, axis=0)
mapper : 변경할 인덱스명을 입력한다.
axis : 인덱스의 인덱스명을 변경할지 컬럼즈의 인덱스명을 변경할지 지정한다.

ex)df.rename_axis(None) > 이름 인덱스 열이 있을때 가장위에 이름이라고 쓰인 부분이 삭제된다. set_index나 pivot_table 함수등으로 집계하면 원하지 않는 인덱스 명이 생길때가 있다. 이때 rename_axis 함수에 None을 사용하면 인덱스명이 제거된다.

4.3.9 인덱스 클래스를 리스트로 변환하기(tolist)

*df의 컬럼즈를 리스트로 변환하기
df.columns.tolist()

4.4) 멀티 인덱스 소개

4.4.1 멀티 인덱스와 레벨
- 멀티 인덱스 데이터 프레임을 생성하는 가장 간단한 방법은 2차원 딕셔너리로 데이터 프레임을 생성하되, 딕셔너리의 키를 튜플로 입력한다.

*예제1
import pandas as pd
data1={('국어','남'):{'1반':10,'2반':20},('국어','여):{'1반':30,'2반':40},
           ('영어','남'):{'1반':15,'2반':25},('영어','여'):{'1반':35,'2반':45}
}
pd.DataFrame(data1)
df

*예제2
df.columns
> MuliIndex([('국어','남'),('국어','여),('영어','남'),('영어','여')
])

- 멀티인덱스는 숙련된 뒤 학습하는것이 좋으므로 단일인덱스로 변경해 다루는 것도 하나의 방법이다. set_axis 함수를 사용하면 멀티 인덱스도 단일 인덱스로 변경된다. 새로운 컬럼즈는 열의 개수와 동일한 수의 원소를 가진 배열이어야한다. 

* 예제3
df.set_axis(['국어_남','국어_여','영어_남','영어_여'],axis=1)

4.4.2 멀티인덱스의 구조 변경하기(stack, unstack)

* 인덱스나 컬럼즈의 데이터를 상호 이동해 데이터의 구조를 변경하는 함수, stack은 컬럼즈를 인덱스로 이동, unstack은 인덱스를 컬럼즈로 이동시킨다.

#stack 함수
df.stack(level=-1, dropna=True)
level : 인덱스로 이동할 컬럼즈의 레벨을 지정한다.
dropna : stack 함수를 적용한 후에 값이 NaN인 행이 생성될 수 있는데 값이 NaN인 행을 생성할지 삭제할지 지정한다.

#unstack 함수
df.unstack(labels, axis=0, level=None)
level: 컬럼즈로 이동할 인덱스의 레벨을 지정한다.
fill_value : NaN을 대체할 값을 지정한다.

- df.stack()
기본적으로는 마지막 레벨(낮은 레벨)을 마지막 위치로 옮긴다.